// <auto-generated />
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241120062357_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1");

            modelBuilder.Entity("Core.Database.Models.AccountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Core.Database.Models.Player.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerModelId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rotation")
                        .HasColumnType("REAL");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<int>("Z")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerModelId")
                        .IsUnique();

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Core.Database.Models.Player.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Agility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intelligence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Willpower")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerModelId")
                        .IsUnique();

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("Core.Database.Models.Player.Vitals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Health")
                        .HasColumnType("REAL");

                    b.Property<double>("Mana")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxHealth")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxMana")
                        .HasColumnType("REAL");

                    b.Property<int>("PlayerModelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerModelId")
                        .IsUnique();

                    b.ToTable("Vitals");
                });

            modelBuilder.Entity("Core.Database.Models.PlayerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountModelId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Core.Database.Models.Player.Position", b =>
                {
                    b.HasOne("Core.Database.Models.PlayerModel", "PlayerModel")
                        .WithOne("Position")
                        .HasForeignKey("Core.Database.Models.Player.Position", "PlayerModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerModel");
                });

            modelBuilder.Entity("Core.Database.Models.Player.Stats", b =>
                {
                    b.HasOne("Core.Database.Models.PlayerModel", "PlayerModel")
                        .WithOne("Stats")
                        .HasForeignKey("Core.Database.Models.Player.Stats", "PlayerModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerModel");
                });

            modelBuilder.Entity("Core.Database.Models.Player.Vitals", b =>
                {
                    b.HasOne("Core.Database.Models.PlayerModel", "PlayerModel")
                        .WithOne("Vitals")
                        .HasForeignKey("Core.Database.Models.Player.Vitals", "PlayerModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerModel");
                });

            modelBuilder.Entity("Core.Database.Models.PlayerModel", b =>
                {
                    b.HasOne("Core.Database.Models.AccountModel", "AccountModel")
                        .WithMany("Players")
                        .HasForeignKey("AccountModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountModel");
                });

            modelBuilder.Entity("Core.Database.Models.AccountModel", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Core.Database.Models.PlayerModel", b =>
                {
                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Stats")
                        .IsRequired();

                    b.Navigation("Vitals")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
